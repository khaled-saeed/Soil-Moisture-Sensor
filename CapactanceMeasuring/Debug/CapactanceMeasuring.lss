
CapactanceMeasuring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001272  00001306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080010a  0080010a  00001310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d0  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acd  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd2  00000000  00000000  00003151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  00003d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dd  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000907  00000000  00000000  0000496d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_1>
       8:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e7       	ldi	r30, 0x72	; 114
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 32       	cpi	r26, 0x2B	; 43
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
      9e:	0c 94 37 09 	jmp	0x126e	; 0x126e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
 *  Author: khaled
 */ 
#include "ADC.h"
// right adjusted so we can read ADC 16 bit 
void ADC_init(Channel_t ch,ReferenceVal_t ref,InterruptStatus_t intStatus ,Prescaler_t pre)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <ADC_init+0x6>
      ac:	00 d0       	rcall	.+0      	; 0xae <ADC_init+0x8>
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	89 83       	std	Y+1, r24	; 0x01
      b4:	6a 83       	std	Y+2, r22	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	2c 83       	std	Y+4, r18	; 0x04
	DDRC &= ~(1U<<ch); 
      ba:	87 e2       	ldi	r24, 0x27	; 39
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	27 e2       	ldi	r18, 0x27	; 39
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	f9 01       	movw	r30, r18
      c4:	60 81       	ld	r22, Z
      c6:	29 81       	ldd	r18, Y+1	; 0x01
      c8:	42 2f       	mov	r20, r18
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	21 e0       	ldi	r18, 0x01	; 1
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <ADC_init+0x30>
      d2:	22 0f       	add	r18, r18
      d4:	33 1f       	adc	r19, r19
      d6:	4a 95       	dec	r20
      d8:	e2 f7       	brpl	.-8      	; 0xd2 <ADC_init+0x2c>
      da:	20 95       	com	r18
      dc:	26 23       	and	r18, r22
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
	ADMUX |= (ref<<REFS0) ; 
      e2:	8c e7       	ldi	r24, 0x7C	; 124
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	2c e7       	ldi	r18, 0x7C	; 124
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	f9 01       	movw	r30, r18
      ec:	20 81       	ld	r18, Z
      ee:	42 2f       	mov	r20, r18
      f0:	2a 81       	ldd	r18, Y+2	; 0x02
      f2:	22 2f       	mov	r18, r18
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	00 24       	eor	r0, r0
      f8:	36 95       	lsr	r19
      fa:	27 95       	ror	r18
      fc:	07 94       	ror	r0
      fe:	36 95       	lsr	r19
     100:	27 95       	ror	r18
     102:	07 94       	ror	r0
     104:	32 2f       	mov	r19, r18
     106:	20 2d       	mov	r18, r0
     108:	24 2b       	or	r18, r20
     10a:	fc 01       	movw	r30, r24
     10c:	20 83       	st	Z, r18
	ADMUX |= (ch<<MUX0) ; 
     10e:	8c e7       	ldi	r24, 0x7C	; 124
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	2c e7       	ldi	r18, 0x7C	; 124
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	f9 01       	movw	r30, r18
     118:	30 81       	ld	r19, Z
     11a:	29 81       	ldd	r18, Y+1	; 0x01
     11c:	23 2b       	or	r18, r19
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
	if (intStatus == INT_ENABLED)
     122:	8b 81       	ldd	r24, Y+3	; 0x03
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	31 f5       	brne	.+76     	; 0x174 <ADC_init+0xce>
	{
		ADCSRA |= (1U<<ADIE) ;	// enable interrupt 
     128:	8a e7       	ldi	r24, 0x7A	; 122
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	2a e7       	ldi	r18, 0x7A	; 122
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	28 60       	ori	r18, 0x08	; 8
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
		ADCSRA |= (pre<<ADPS0);	// set prescaler 
     13a:	8a e7       	ldi	r24, 0x7A	; 122
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	2a e7       	ldi	r18, 0x7A	; 122
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	f9 01       	movw	r30, r18
     144:	30 81       	ld	r19, Z
     146:	2c 81       	ldd	r18, Y+4	; 0x04
     148:	23 2b       	or	r18, r19
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
		ADCSRA |= (1U<<ADEN);	// enable ADC 
     14e:	8a e7       	ldi	r24, 0x7A	; 122
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	2a e7       	ldi	r18, 0x7A	; 122
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	f9 01       	movw	r30, r18
     158:	20 81       	ld	r18, Z
     15a:	20 68       	ori	r18, 0x80	; 128
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
		ADCSRA |= (1U<< ADSC);	// start conversion 
     160:	8a e7       	ldi	r24, 0x7A	; 122
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	2a e7       	ldi	r18, 0x7A	; 122
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	20 64       	ori	r18, 0x40	; 64
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
	{
		ADCSRA &= ~(1U<<ADIE) ; 
		ADCSRA |= (pre<<ADPS0);	// set prescaler

	}
}
     172:	13 c0       	rjmp	.+38     	; 0x19a <ADC_init+0xf4>
		ADCSRA |= (1U<<ADEN);	// enable ADC 
		ADCSRA |= (1U<< ADSC);	// start conversion 
	}
	else
	{
		ADCSRA &= ~(1U<<ADIE) ; 
     174:	8a e7       	ldi	r24, 0x7A	; 122
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	2a e7       	ldi	r18, 0x7A	; 122
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	20 81       	ld	r18, Z
     180:	27 7f       	andi	r18, 0xF7	; 247
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
		ADCSRA |= (pre<<ADPS0);	// set prescaler
     186:	8a e7       	ldi	r24, 0x7A	; 122
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	2a e7       	ldi	r18, 0x7A	; 122
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	30 81       	ld	r19, Z
     192:	2c 81       	ldd	r18, Y+4	; 0x04
     194:	23 2b       	or	r18, r19
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18

	}
}
     19a:	00 00       	nop
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <ADC_read>:
uint16_t ADC_read(Channel_t ch)
{	
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	1f 92       	push	r1
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	89 83       	std	Y+1, r24	; 0x01
	DDRC &= ~(1U<<ch); 
     1b6:	87 e2       	ldi	r24, 0x27	; 39
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	27 e2       	ldi	r18, 0x27	; 39
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	f9 01       	movw	r30, r18
     1c0:	60 81       	ld	r22, Z
     1c2:	29 81       	ldd	r18, Y+1	; 0x01
     1c4:	42 2f       	mov	r20, r18
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <ADC_read+0x28>
     1ce:	22 0f       	add	r18, r18
     1d0:	33 1f       	adc	r19, r19
     1d2:	4a 95       	dec	r20
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <ADC_read+0x24>
     1d6:	20 95       	com	r18
     1d8:	26 23       	and	r18, r22
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	ADMUX |= (ch<<MUX0) ;
     1de:	8c e7       	ldi	r24, 0x7C	; 124
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	2c e7       	ldi	r18, 0x7C	; 124
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	f9 01       	movw	r30, r18
     1e8:	30 81       	ld	r19, Z
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	23 2b       	or	r18, r19
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
	ADCSRA |= (1U<<ADEN);						// enable ADC
     1f2:	8a e7       	ldi	r24, 0x7A	; 122
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2a e7       	ldi	r18, 0x7A	; 122
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	20 68       	ori	r18, 0x80	; 128
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	ADCSRA |= (1U<< ADSC);						// start conversion
     204:	8a e7       	ldi	r24, 0x7A	; 122
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2a e7       	ldi	r18, 0x7A	; 122
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	20 64       	ori	r18, 0x40	; 64
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
	while(((ADCSRA&(1U<<ADIF))>>ADIF) != 1);	// busy wait as long the conversion has not finished 
     216:	00 00       	nop
     218:	8a e7       	ldi	r24, 0x7A	; 122
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	80 71       	andi	r24, 0x10	; 16
     226:	99 27       	eor	r25, r25
     228:	92 95       	swap	r25
     22a:	82 95       	swap	r24
     22c:	8f 70       	andi	r24, 0x0F	; 15
     22e:	89 27       	eor	r24, r25
     230:	9f 70       	andi	r25, 0x0F	; 15
     232:	89 27       	eor	r24, r25
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	81 f7       	brne	.-32     	; 0x218 <ADC_read+0x6e>
	ADCSRA &= ~(1U<<ADIF);						// clear the flag 
     238:	8a e7       	ldi	r24, 0x7A	; 122
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	2a e7       	ldi	r18, 0x7A	; 122
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	2f 7e       	andi	r18, 0xEF	; 239
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	return ADC ;								// return the ADCL+ADCH 
     24a:	88 e7       	ldi	r24, 0x78	; 120
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	91 81       	ldd	r25, Z+1	; 0x01
}
     254:	0f 90       	pop	r0
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <EX_INT0_init>:
#include "Interrupt.h"
extern float temp_capacitance ; 
extern float Setpoint ;
extern float MaxPoint ;
void EX_INT0_init(SenseControl_t IntSrc) 
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	1f 92       	push	r1
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	89 83       	std	Y+1, r24	; 0x01
	EICRA |=(IntSrc<<ISC00); 
     268:	89 e6       	ldi	r24, 0x69	; 105
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	29 e6       	ldi	r18, 0x69	; 105
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	f9 01       	movw	r30, r18
     272:	30 81       	ld	r19, Z
     274:	29 81       	ldd	r18, Y+1	; 0x01
     276:	23 2b       	or	r18, r19
     278:	fc 01       	movw	r30, r24
     27a:	20 83       	st	Z, r18
	EIMSK |= (1U<<INT0_EN); 
     27c:	8d e3       	ldi	r24, 0x3D	; 61
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	2d e3       	ldi	r18, 0x3D	; 61
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	21 60       	ori	r18, 0x01	; 1
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
}
     28e:	00 00       	nop
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <EX_INT1_init>:

void EX_INT1_init(SenseControl_t IntSrc) 
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	89 83       	std	Y+1, r24	; 0x01
	EICRA |=(IntSrc<<ISC10);
     2a4:	89 e6       	ldi	r24, 0x69	; 105
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	29 e6       	ldi	r18, 0x69	; 105
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	20 81       	ld	r18, Z
     2b0:	42 2f       	mov	r20, r18
     2b2:	29 81       	ldd	r18, Y+1	; 0x01
     2b4:	22 2f       	mov	r18, r18
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	22 0f       	add	r18, r18
     2be:	33 1f       	adc	r19, r19
     2c0:	24 2b       	or	r18, r20
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
	EIMSK |= (1U<<INT1_EN);
     2c6:	8d e3       	ldi	r24, 0x3D	; 61
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2d e3       	ldi	r18, 0x3D	; 61
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	f9 01       	movw	r30, r18
     2d0:	20 81       	ld	r18, Z
     2d2:	22 60       	ori	r18, 0x02	; 2
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
}
     2d8:	00 00       	nop
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <setCallBackFunc_INT0>:

void setCallBackFunc_INT0(CallBackFpt_t callBackFunction)
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <setCallBackFunc_INT0+0x6>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	9a 83       	std	Y+2, r25	; 0x02
     2ee:	89 83       	std	Y+1, r24	; 0x01
	CallBackFuncINT0_ptr = callBackFunction ; 
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	9a 81       	ldd	r25, Y+2	; 0x02
     2f4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <CallBackFuncINT0_ptr+0x1>
     2f8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CallBackFuncINT0_ptr>
}
     2fc:	00 00       	nop
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <setCallBackFunc_INT1>:
void setCallBackFunc_INT1(CallBackFpt_t callBackFunction)
{
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	00 d0       	rcall	.+0      	; 0x30e <setCallBackFunc_INT1+0x6>
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	89 83       	std	Y+1, r24	; 0x01
	CallBackFuncINT1_ptr = callBackFunction ; 
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	9a 81       	ldd	r25, Y+2	; 0x02
     31a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <CallBackFuncINT1_ptr+0x1>
     31e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <CallBackFuncINT1_ptr>
}
     322:	00 00       	nop
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <INT0_Handler>:

void INT0_Handler(void)
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
	MaxPoint = temp_capacitance - Setpoint ;
     336:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <temp_capacitance>
     33a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <temp_capacitance+0x1>
     33e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <temp_capacitance+0x2>
     342:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <temp_capacitance+0x3>
     346:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     34a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     34e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     352:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     356:	bc 01       	movw	r22, r24
     358:	cd 01       	movw	r24, r26
     35a:	0e 94 d7 06 	call	0xdae	; 0xdae <__subsf3>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <MaxPoint>
     366:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <MaxPoint+0x1>
     36a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <MaxPoint+0x2>
     36e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <MaxPoint+0x3>
}
     372:	00 00       	nop
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <INT1_Handler>:
void INT1_Handler(void)
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
	Setpoint = temp_capacitance ; 
     382:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <temp_capacitance>
     386:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <temp_capacitance+0x1>
     38a:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <temp_capacitance+0x2>
     38e:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <temp_capacitance+0x3>
     392:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     396:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     39a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     39e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
     3a2:	00 00       	nop
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <I2C_setRequestedCallbacks>:
  // clear acknowledge and enable bits
  cli();
  TWCR = 0;
  TWAR = 0;
  sei();
}
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <I2C_setRequestedCallbacks+0x6>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <I2C_req+0x1>
     3c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I2C_req>
     3c4:	00 00       	nop
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <I2C_init>:
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	89 83       	std	Y+1, r24	; 0x01
     3dc:	f8 94       	cli
     3de:	8a eb       	ldi	r24, 0xBA	; 186
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	22 0f       	add	r18, r18
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
     3ea:	8c eb       	ldi	r24, 0xBC	; 188
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	25 ec       	ldi	r18, 0xC5	; 197
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
     3f4:	78 94       	sei
     3f6:	00 00       	nop
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <__vector_24>:

ISR(TWI_vect)
{
     400:	1f 92       	push	r1
     402:	0f 92       	push	r0
     404:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS)
     42c:	89 eb       	ldi	r24, 0xB9	; 185
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	88 7f       	andi	r24, 0xF8	; 248
     43a:	99 27       	eor	r25, r25
     43c:	80 38       	cpi	r24, 0x80	; 128
     43e:	91 05       	cpc	r25, r1
     440:	69 f0       	breq	.+26     	; 0x45c <__vector_24+0x5c>
     442:	81 38       	cpi	r24, 0x81	; 129
     444:	91 05       	cpc	r25, r1
     446:	1c f4       	brge	.+6      	; 0x44e <__vector_24+0x4e>
     448:	89 2b       	or	r24, r25
     44a:	81 f1       	breq	.+96     	; 0x4ac <__vector_24+0xac>
     44c:	39 c0       	rjmp	.+114    	; 0x4c0 <__vector_24+0xc0>
     44e:	88 3a       	cpi	r24, 0xA8	; 168
     450:	91 05       	cpc	r25, r1
     452:	a1 f0       	breq	.+40     	; 0x47c <__vector_24+0x7c>
     454:	88 3b       	cpi	r24, 0xB8	; 184
     456:	91 05       	cpc	r25, r1
     458:	e9 f0       	breq	.+58     	; 0x494 <__vector_24+0x94>
     45a:	32 c0       	rjmp	.+100    	; 0x4c0 <__vector_24+0xc0>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
     45c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
     460:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
     464:	8b eb       	ldi	r24, 0xBB	; 187
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fc 01       	movw	r30, r24
     46a:	80 81       	ld	r24, Z
     46c:	f9 01       	movw	r30, r18
     46e:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     470:	8c eb       	ldi	r24, 0xBC	; 188
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	25 ec       	ldi	r18, 0xC5	; 197
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
      break;
     47a:	28 c0       	rjmp	.+80     	; 0x4cc <__vector_24+0xcc>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
     47c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_req>
     480:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <I2C_req+0x1>
     484:	fc 01       	movw	r30, r24
     486:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     488:	8c eb       	ldi	r24, 0xBC	; 188
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	25 ec       	ldi	r18, 0xC5	; 197
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
      break;
     492:	1c c0       	rjmp	.+56     	; 0x4cc <__vector_24+0xcc>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
     494:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_req>
     498:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <I2C_req+0x1>
     49c:	fc 01       	movw	r30, r24
     49e:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     4a0:	8c eb       	ldi	r24, 0xBC	; 188
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	25 ec       	ldi	r18, 0xC5	; 197
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
      break;
     4aa:	10 c0       	rjmp	.+32     	; 0x4cc <__vector_24+0xcc>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
     4ac:	8c eb       	ldi	r24, 0xBC	; 188
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	10 82       	st	Z, r1
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
     4b4:	8c eb       	ldi	r24, 0xBC	; 188
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	25 ec       	ldi	r18, 0xC5	; 197
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
      break;
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <__vector_24+0xcc>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     4c0:	8c eb       	ldi	r24, 0xBC	; 188
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	25 ec       	ldi	r18, 0xC5	; 197
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
      break;
     4ca:	00 00       	nop
  }
} 
     4cc:	00 00       	nop
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <I2C_requested>:

#include "Interface.h"


void I2C_requested()
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	I2C_transmitByte((int)percentage);
     500:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <percentage>
     504:	89 83       	std	Y+1, r24	; 0x01
void I2C_stop(void);
void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)());

inline void __attribute__((always_inline)) I2C_transmitByte(uint8_t data)
{
  TWDR = data;
     506:	8b eb       	ldi	r24, 0xBB	; 187
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	29 81       	ldd	r18, Y+1	; 0x01
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
}
     510:	00 00       	nop
     512:	0f 90       	pop	r0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <main>:


int main()
{
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	a2 97       	sbiw	r28, 0x22	; 34
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
	init_millis(F_CPU); 
     53a:	60 e4       	ldi	r22, 0x40	; 64
     53c:	72 e4       	ldi	r23, 0x42	; 66
     53e:	8f e0       	ldi	r24, 0x0F	; 15
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <init_millis>
	ADC_init(CH0,AVCC,INT_DISABLED,PRESCALER16);
     546:	24 e0       	ldi	r18, 0x04	; 4
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	I2C_setRequestedCallbacks(I2C_requested);
     552:	8b e7       	ldi	r24, 0x7B	; 123
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_setRequestedCallbacks>
	I2C_init(SLAVE_ADDR); 
     55a:	89 e0       	ldi	r24, 0x09	; 9
     55c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <I2C_init>
	DDRD |=	LED;  
     560:	8a e2       	ldi	r24, 0x2A	; 42
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	2a e2       	ldi	r18, 0x2A	; 42
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	20 61       	ori	r18, 0x10	; 16
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	DDRD &=~ LOW_LIMIT_BUTTON; 
     572:	8a e2       	ldi	r24, 0x2A	; 42
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2a e2       	ldi	r18, 0x2A	; 42
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	27 7f       	andi	r18, 0xF7	; 247
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	DDRD &=~ HIGH_LIMIT_BUTTON;  
     584:	8a e2       	ldi	r24, 0x2A	; 42
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2a e2       	ldi	r18, 0x2A	; 42
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	2b 7f       	andi	r18, 0xFB	; 251
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	DDRC |= SENSOR_OUT;
     596:	87 e2       	ldi	r24, 0x27	; 39
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	27 e2       	ldi	r18, 0x27	; 39
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	24 60       	ori	r18, 0x04	; 4
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
	EX_INT0_init(RISING_EDGE);
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	0e 94 2e 01 	call	0x25c	; 0x25c <EX_INT0_init>
	EX_INT1_init(RISING_EDGE);
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 4c 01 	call	0x298	; 0x298 <EX_INT1_init>
	setCallBackFunc_INT0(&INT0_Handler);
     5b4:	87 e9       	ldi	r24, 0x97	; 151
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <setCallBackFunc_INT0>
	setCallBackFunc_INT1(&INT1_Handler);
     5bc:	8d eb       	ldi	r24, 0xBD	; 189
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 84 01 	call	0x308	; 0x308 <setCallBackFunc_INT1>
	sei();
     5c4:	78 94       	sei
	while(1) {
			DDRC &= ~SENSOR_IN; 
     5c6:	87 e2       	ldi	r24, 0x27	; 39
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	27 e2       	ldi	r18, 0x27	; 39
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	2e 7f       	andi	r18, 0xFE	; 254
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
			PORTC |= SENSOR_OUT; 
     5d8:	88 e2       	ldi	r24, 0x28	; 40
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	28 e2       	ldi	r18, 0x28	; 40
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	24 60       	ori	r18, 0x04	; 4
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
			uint16_t val =ADC_read(CH0); 
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ADC_read>
     5f0:	9e 83       	std	Y+6, r25	; 0x06
     5f2:	8d 83       	std	Y+5, r24	; 0x05
			PORTC &= ~SENSOR_OUT; 
     5f4:	88 e2       	ldi	r24, 0x28	; 40
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	28 e2       	ldi	r18, 0x28	; 40
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	f9 01       	movw	r30, r18
     5fe:	20 81       	ld	r18, Z
     600:	2b 7f       	andi	r18, 0xFB	; 251
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
			if((val <1000) )
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	9e 81       	ldd	r25, Y+6	; 0x06
     60a:	88 3e       	cpi	r24, 0xE8	; 232
     60c:	93 40       	sbci	r25, 0x03	; 3
     60e:	08 f0       	brcs	.+2      	; 0x612 <main+0xf8>
     610:	20 c1       	rjmp	.+576    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			{
				DDRC |=SENSOR_IN; 
     612:	87 e2       	ldi	r24, 0x27	; 39
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	27 e2       	ldi	r18, 0x27	; 39
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	21 60       	ori	r18, 0x01	; 1
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
				capacitance += (float)val * IN_CAP_TO_GND / (float)(MAX_ADC_VALUE - val);	
     624:	8d 81       	ldd	r24, Y+5	; 0x05
     626:	9e 81       	ldd	r25, Y+6	; 0x06
     628:	cc 01       	movw	r24, r24
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	bc 01       	movw	r22, r24
     630:	cd 01       	movw	r24, r26
     632:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__floatunsisf>
     636:	7b 01       	movw	r14, r22
     638:	8c 01       	movw	r16, r24
     63a:	8a e0       	ldi	r24, 0x0A	; 10
     63c:	97 ed       	ldi	r25, 0xD7	; 215
     63e:	a3 ec       	ldi	r26, 0xC3	; 195
     640:	b1 e4       	ldi	r27, 0x41	; 65
     642:	9c 01       	movw	r18, r24
     644:	ad 01       	movw	r20, r26
     646:	c8 01       	movw	r24, r16
     648:	b7 01       	movw	r22, r14
     64a:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	6c 01       	movw	r12, r24
     654:	7d 01       	movw	r14, r26
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	9c 01       	movw	r18, r24
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	9e 81       	ldd	r25, Y+6	; 0x06
     660:	a9 01       	movw	r20, r18
     662:	48 1b       	sub	r20, r24
     664:	59 0b       	sbc	r21, r25
     666:	ca 01       	movw	r24, r20
     668:	cc 01       	movw	r24, r24
     66a:	a0 e0       	ldi	r26, 0x00	; 0
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__floatunsisf>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	9c 01       	movw	r18, r24
     67c:	ad 01       	movw	r20, r26
     67e:	c7 01       	movw	r24, r14
     680:	b6 01       	movw	r22, r12
     682:	0e 94 49 07 	call	0xe92	; 0xe92 <__divsf3>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	7c 01       	movw	r14, r24
     68c:	8d 01       	movw	r16, r26
     68e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <capacitance>
     692:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <capacitance+0x1>
     696:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <capacitance+0x2>
     69a:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <capacitance+0x3>
     69e:	9c 01       	movw	r18, r24
     6a0:	ad 01       	movw	r20, r26
     6a2:	c8 01       	movw	r24, r16
     6a4:	b7 01       	movw	r22, r14
     6a6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__addsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <capacitance>
     6b2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <capacitance+0x1>
     6b6:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <capacitance+0x2>
     6ba:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <capacitance+0x3>
				NoSamples++; 
     6be:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <NoSamples>
     6c2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <NoSamples+0x1>
     6c6:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <NoSamples+0x2>
     6ca:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <NoSamples+0x3>
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	a1 1d       	adc	r26, r1
     6d2:	b1 1d       	adc	r27, r1
     6d4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <NoSamples>
     6d8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <NoSamples+0x1>
     6dc:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <NoSamples+0x2>
     6e0:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <NoSamples+0x3>
				if(millis() - lastTime >= _delay)
     6e4:	0e 94 a8 06 	call	0xd50	; 0xd50 <millis>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <lastTime>
     6f0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <lastTime+0x1>
     6f4:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <lastTime+0x2>
     6f8:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <lastTime+0x3>
     6fc:	28 1b       	sub	r18, r24
     6fe:	39 0b       	sbc	r19, r25
     700:	4a 0b       	sbc	r20, r26
     702:	5b 0b       	sbc	r21, r27
     704:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_delay>
     708:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_delay+0x1>
     70c:	cc 01       	movw	r24, r24
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	4a 07       	cpc	r20, r26
     718:	5b 07       	cpc	r21, r27
     71a:	08 f4       	brcc	.+2      	; 0x71e <main+0x204>
     71c:	9a c0       	rjmp	.+308    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
				{
					capacitance/= NoSamples ;
     71e:	c0 90 13 01 	lds	r12, 0x0113	; 0x800113 <capacitance>
     722:	d0 90 14 01 	lds	r13, 0x0114	; 0x800114 <capacitance+0x1>
     726:	e0 90 15 01 	lds	r14, 0x0115	; 0x800115 <capacitance+0x2>
     72a:	f0 90 16 01 	lds	r15, 0x0116	; 0x800116 <capacitance+0x3>
     72e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <NoSamples>
     732:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <NoSamples+0x1>
     736:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <NoSamples+0x2>
     73a:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <NoSamples+0x3>
     73e:	bc 01       	movw	r22, r24
     740:	cd 01       	movw	r24, r26
     742:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__floatunsisf>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	9c 01       	movw	r18, r24
     74c:	ad 01       	movw	r20, r26
     74e:	c7 01       	movw	r24, r14
     750:	b6 01       	movw	r22, r12
     752:	0e 94 49 07 	call	0xe92	; 0xe92 <__divsf3>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <capacitance>
     75e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <capacitance+0x1>
     762:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <capacitance+0x2>
     766:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <capacitance+0x3>
					temp_capacitance =capacitance ; 
     76a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <capacitance>
     76e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <capacitance+0x1>
     772:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <capacitance+0x2>
     776:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <capacitance+0x3>
     77a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <temp_capacitance>
     77e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <temp_capacitance+0x1>
     782:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <temp_capacitance+0x2>
     786:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <temp_capacitance+0x3>
					percentage =((capacitance-Setpoint)/MaxPoint)*100 ; 
     78a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <capacitance>
     78e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <capacitance+0x1>
     792:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <capacitance+0x2>
     796:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <capacitance+0x3>
     79a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     79e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7a2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     7a6:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     7aa:	bc 01       	movw	r22, r24
     7ac:	cd 01       	movw	r24, r26
     7ae:	0e 94 d7 06 	call	0xdae	; 0xdae <__subsf3>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	7c 01       	movw	r14, r24
     7b8:	8d 01       	movw	r16, r26
     7ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MaxPoint>
     7be:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MaxPoint+0x1>
     7c2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <MaxPoint+0x2>
     7c6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <MaxPoint+0x3>
     7ca:	9c 01       	movw	r18, r24
     7cc:	ad 01       	movw	r20, r26
     7ce:	c8 01       	movw	r24, r16
     7d0:	b7 01       	movw	r22, r14
     7d2:	0e 94 49 07 	call	0xe92	; 0xe92 <__divsf3>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	48 ec       	ldi	r20, 0xC8	; 200
     7e0:	52 e4       	ldi	r21, 0x42	; 66
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	bc 01       	movw	r22, r24
     7f0:	cd 01       	movw	r24, r26
     7f2:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fixsfsi>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <percentage>
					if (percentage < 0)
     7fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <percentage>
     802:	88 23       	and	r24, r24
     804:	1c f4       	brge	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
					{
						percentage = 0 ; 
     806:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <percentage>
     80a:	07 c0       	rjmp	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
					}
					else if (percentage > 100)
     80c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <percentage>
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	1c f0       	brlt	.+6      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
					{
						percentage = 100; 
     814:	84 e6       	ldi	r24, 0x64	; 100
     816:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <percentage>
					}
					NoSamples = 0 ;
     81a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <NoSamples>
     81e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <NoSamples+0x1>
     822:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <NoSamples+0x2>
     826:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <NoSamples+0x3>
					capacitance = 0 ;
     82a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <capacitance>
     82e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <capacitance+0x1>
     832:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <capacitance+0x2>
     836:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <capacitance+0x3>
					lastTime = millis();
     83a:	0e 94 a8 06 	call	0xd50	; 0xd50 <millis>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <lastTime>
     846:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <lastTime+0x1>
     84a:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <lastTime+0x2>
     84e:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <lastTime+0x3>
				}
			}
			if (LOW_BUTTON == UNPRESSED && (PIND&LOW_LIMIT_BUTTON))
     852:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LOW_BUTTON>
     856:	88 23       	and	r24, r24
     858:	69 f4       	brne	.+26     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     85a:	89 e2       	ldi	r24, 0x29	; 41
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	88 70       	andi	r24, 0x08	; 8
     868:	99 27       	eor	r25, r25
     86a:	89 2b       	or	r24, r25
     86c:	19 f0       	breq	.+6      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
			{
				LOW_BUTTON = PRESSED ; 
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <LOW_BUTTON>
			}
			if (LOW_BUTTON == PRESSED && (PIND&LOW_LIMIT_BUTTON))
     874:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LOW_BUTTON>
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	09 f0       	breq	.+2      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     87c:	95 c0       	rjmp	.+298    	; 0x9a8 <__stack+0xa9>
     87e:	89 e2       	ldi	r24, 0x29	; 41
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	fc 01       	movw	r30, r24
     884:	80 81       	ld	r24, Z
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	88 70       	andi	r24, 0x08	; 8
     88c:	99 27       	eor	r25, r25
     88e:	89 2b       	or	r24, r25
     890:	09 f4       	brne	.+2      	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     892:	8a c0       	rjmp	.+276    	; 0x9a8 <__stack+0xa9>
			{
				//Setpoint = temp_capacitance ; 
				int i  ; 
				for (i = 0 ; i <6 ;i++)
     894:	1a 82       	std	Y+2, r1	; 0x02
     896:	19 82       	std	Y+1, r1	; 0x01
     898:	81 c0       	rjmp	.+258    	; 0x99c <__stack+0x9d>
				{
					PORTD ^= LED ; 
     89a:	8b e2       	ldi	r24, 0x2B	; 43
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2b e2       	ldi	r18, 0x2B	; 43
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	30 81       	ld	r19, Z
     8a6:	20 e1       	ldi	r18, 0x10	; 16
     8a8:	23 27       	eor	r18, r19
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a8 ec       	ldi	r26, 0xC8	; 200
     8b4:	b2 e4       	ldi	r27, 0x42	; 66
     8b6:	8b 87       	std	Y+11, r24	; 0x0b
     8b8:	9c 87       	std	Y+12, r25	; 0x0c
     8ba:	ad 87       	std	Y+13, r26	; 0x0d
     8bc:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a e7       	ldi	r20, 0x7A	; 122
     8c4:	53 e4       	ldi	r21, 0x43	; 67
     8c6:	6b 85       	ldd	r22, Y+11	; 0x0b
     8c8:	7c 85       	ldd	r23, Y+12	; 0x0c
     8ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     8cc:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ce:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	8f 87       	std	Y+15, r24	; 0x0f
     8d8:	98 8b       	std	Y+16, r25	; 0x10
     8da:	a9 8b       	std	Y+17, r26	; 0x11
     8dc:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e8       	ldi	r20, 0x80	; 128
     8e4:	5f e3       	ldi	r21, 0x3F	; 63
     8e6:	6f 85       	ldd	r22, Y+15	; 0x0f
     8e8:	78 89       	ldd	r23, Y+16	; 0x10
     8ea:	89 89       	ldd	r24, Y+17	; 0x11
     8ec:	9a 89       	ldd	r25, Y+18	; 0x12
     8ee:	0e 94 44 07 	call	0xe88	; 0xe88 <__cmpsf2>
     8f2:	88 23       	and	r24, r24
     8f4:	2c f4       	brge	.+10     	; 0x900 <__stack+0x1>
		__ticks = 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9c 8b       	std	Y+20, r25	; 0x14
     8fc:	8b 8b       	std	Y+19, r24	; 0x13
     8fe:	3f c0       	rjmp	.+126    	; 0x97e <__stack+0x7f>
	else if (__tmp > 65535)
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	3f ef       	ldi	r19, 0xFF	; 255
     904:	4f e7       	ldi	r20, 0x7F	; 127
     906:	57 e4       	ldi	r21, 0x47	; 71
     908:	6f 85       	ldd	r22, Y+15	; 0x0f
     90a:	78 89       	ldd	r23, Y+16	; 0x10
     90c:	89 89       	ldd	r24, Y+17	; 0x11
     90e:	9a 89       	ldd	r25, Y+18	; 0x12
     910:	0e 94 a3 08 	call	0x1146	; 0x1146 <__gesf2>
     914:	18 16       	cp	r1, r24
     916:	4c f5       	brge	.+82     	; 0x96a <__stack+0x6b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e2       	ldi	r20, 0x20	; 32
     91e:	51 e4       	ldi	r21, 0x41	; 65
     920:	6b 85       	ldd	r22, Y+11	; 0x0b
     922:	7c 85       	ldd	r23, Y+12	; 0x0c
     924:	8d 85       	ldd	r24, Y+13	; 0x0d
     926:	9e 85       	ldd	r25, Y+14	; 0x0e
     928:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	bc 01       	movw	r22, r24
     932:	cd 01       	movw	r24, r26
     934:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fixunssfsi>
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	9c 8b       	std	Y+20, r25	; 0x14
     93e:	8b 8b       	std	Y+19, r24	; 0x13
     940:	0f c0       	rjmp	.+30     	; 0x960 <__stack+0x61>
     942:	89 e1       	ldi	r24, 0x19	; 25
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	9e 8b       	std	Y+22, r25	; 0x16
     948:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     94a:	8d 89       	ldd	r24, Y+21	; 0x15
     94c:	9e 89       	ldd	r25, Y+22	; 0x16
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0x4f>
     952:	9e 8b       	std	Y+22, r25	; 0x16
     954:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     956:	8b 89       	ldd	r24, Y+19	; 0x13
     958:	9c 89       	ldd	r25, Y+20	; 0x14
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	9c 8b       	std	Y+20, r25	; 0x14
     95e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     960:	8b 89       	ldd	r24, Y+19	; 0x13
     962:	9c 89       	ldd	r25, Y+20	; 0x14
     964:	89 2b       	or	r24, r25
     966:	69 f7       	brne	.-38     	; 0x942 <__stack+0x43>
     968:	14 c0       	rjmp	.+40     	; 0x992 <__stack+0x93>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     96a:	6f 85       	ldd	r22, Y+15	; 0x0f
     96c:	78 89       	ldd	r23, Y+16	; 0x10
     96e:	89 89       	ldd	r24, Y+17	; 0x11
     970:	9a 89       	ldd	r25, Y+18	; 0x12
     972:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fixunssfsi>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	9c 8b       	std	Y+20, r25	; 0x14
     97c:	8b 8b       	std	Y+19, r24	; 0x13
     97e:	8b 89       	ldd	r24, Y+19	; 0x13
     980:	9c 89       	ldd	r25, Y+20	; 0x14
     982:	98 8f       	std	Y+24, r25	; 0x18
     984:	8f 8b       	std	Y+23, r24	; 0x17
     986:	8f 89       	ldd	r24, Y+23	; 0x17
     988:	98 8d       	ldd	r25, Y+24	; 0x18
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <__stack+0x8b>
     98e:	98 8f       	std	Y+24, r25	; 0x18
     990:	8f 8b       	std	Y+23, r24	; 0x17
			}
			if (LOW_BUTTON == PRESSED && (PIND&LOW_LIMIT_BUTTON))
			{
				//Setpoint = temp_capacitance ; 
				int i  ; 
				for (i = 0 ; i <6 ;i++)
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	06 97       	sbiw	r24, 0x06	; 6
     9a2:	0c f4       	brge	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	7a cf       	rjmp	.-268    	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
			if (LOW_BUTTON == UNPRESSED && (PIND&LOW_LIMIT_BUTTON))
			{
				LOW_BUTTON = PRESSED ; 
			}
			if (LOW_BUTTON == PRESSED && (PIND&LOW_LIMIT_BUTTON))
			{
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>
					_delay_ms(100) ; 
				}
			}
			else
			{
				LOW_BUTTON =UNPRESSED ;
     9a8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <LOW_BUTTON>
				
			}
			if (HIGH_BUTTON == UNPRESSED && (PIND&HIGH_LIMIT_BUTTON))
     9ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HIGH_BUTTON>
     9b0:	88 23       	and	r24, r24
     9b2:	69 f4       	brne	.+26     	; 0x9ce <__stack+0xcf>
     9b4:	89 e2       	ldi	r24, 0x29	; 41
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	fc 01       	movw	r30, r24
     9ba:	80 81       	ld	r24, Z
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	84 70       	andi	r24, 0x04	; 4
     9c2:	99 27       	eor	r25, r25
     9c4:	89 2b       	or	r24, r25
     9c6:	19 f0       	breq	.+6      	; 0x9ce <__stack+0xcf>
			{
				HIGH_BUTTON = PRESSED ;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <HIGH_BUTTON>
			}
			if (HIGH_BUTTON == PRESSED && (PIND&HIGH_LIMIT_BUTTON))
     9ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HIGH_BUTTON>
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0xd9>
     9d6:	95 c0       	rjmp	.+298    	; 0xb02 <__stack+0x203>
     9d8:	89 e2       	ldi	r24, 0x29	; 41
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	84 70       	andi	r24, 0x04	; 4
     9e6:	99 27       	eor	r25, r25
     9e8:	89 2b       	or	r24, r25
     9ea:	09 f4       	brne	.+2      	; 0x9ee <__stack+0xef>
     9ec:	8a c0       	rjmp	.+276    	; 0xb02 <__stack+0x203>
			{
				//MaxPoint = temp_capacitance ;
				int i  ;
				for (i = 0 ; i <6 ;i++)
     9ee:	1c 82       	std	Y+4, r1	; 0x04
     9f0:	1b 82       	std	Y+3, r1	; 0x03
     9f2:	81 c0       	rjmp	.+258    	; 0xaf6 <__stack+0x1f7>
				{
					PORTD ^= LED ;
     9f4:	8b e2       	ldi	r24, 0x2B	; 43
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	2b e2       	ldi	r18, 0x2B	; 43
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	f9 01       	movw	r30, r18
     9fe:	30 81       	ld	r19, Z
     a00:	20 e1       	ldi	r18, 0x10	; 16
     a02:	23 27       	eor	r18, r19
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a8 ec       	ldi	r26, 0xC8	; 200
     a0e:	b2 e4       	ldi	r27, 0x42	; 66
     a10:	8f 83       	std	Y+7, r24	; 0x07
     a12:	98 87       	std	Y+8, r25	; 0x08
     a14:	a9 87       	std	Y+9, r26	; 0x09
     a16:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	4a e7       	ldi	r20, 0x7A	; 122
     a1e:	53 e4       	ldi	r21, 0x43	; 67
     a20:	6f 81       	ldd	r22, Y+7	; 0x07
     a22:	78 85       	ldd	r23, Y+8	; 0x08
     a24:	89 85       	ldd	r24, Y+9	; 0x09
     a26:	9a 85       	ldd	r25, Y+10	; 0x0a
     a28:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	89 8f       	std	Y+25, r24	; 0x19
     a32:	9a 8f       	std	Y+26, r25	; 0x1a
     a34:	ab 8f       	std	Y+27, r26	; 0x1b
     a36:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e8       	ldi	r20, 0x80	; 128
     a3e:	5f e3       	ldi	r21, 0x3F	; 63
     a40:	69 8d       	ldd	r22, Y+25	; 0x19
     a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a48:	0e 94 44 07 	call	0xe88	; 0xe88 <__cmpsf2>
     a4c:	88 23       	and	r24, r24
     a4e:	2c f4       	brge	.+10     	; 0xa5a <__stack+0x15b>
		__ticks = 1;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	9e 8f       	std	Y+30, r25	; 0x1e
     a56:	8d 8f       	std	Y+29, r24	; 0x1d
     a58:	3f c0       	rjmp	.+126    	; 0xad8 <__stack+0x1d9>
	else if (__tmp > 65535)
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	3f ef       	ldi	r19, 0xFF	; 255
     a5e:	4f e7       	ldi	r20, 0x7F	; 127
     a60:	57 e4       	ldi	r21, 0x47	; 71
     a62:	69 8d       	ldd	r22, Y+25	; 0x19
     a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a6a:	0e 94 a3 08 	call	0x1146	; 0x1146 <__gesf2>
     a6e:	18 16       	cp	r1, r24
     a70:	4c f5       	brge	.+82     	; 0xac4 <__stack+0x1c5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	51 e4       	ldi	r21, 0x41	; 65
     a7a:	6f 81       	ldd	r22, Y+7	; 0x07
     a7c:	78 85       	ldd	r23, Y+8	; 0x08
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	9a 85       	ldd	r25, Y+10	; 0x0a
     a82:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	bc 01       	movw	r22, r24
     a8c:	cd 01       	movw	r24, r26
     a8e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fixunssfsi>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	9e 8f       	std	Y+30, r25	; 0x1e
     a98:	8d 8f       	std	Y+29, r24	; 0x1d
     a9a:	0f c0       	rjmp	.+30     	; 0xaba <__stack+0x1bb>
     a9c:	89 e1       	ldi	r24, 0x19	; 25
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	98 a3       	std	Y+32, r25	; 0x20
     aa2:	8f 8f       	std	Y+31, r24	; 0x1f
     aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     aa6:	98 a1       	ldd	r25, Y+32	; 0x20
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <__stack+0x1a9>
     aac:	98 a3       	std	Y+32, r25	; 0x20
     aae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ab2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9e 8f       	std	Y+30, r25	; 0x1e
     ab8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     abc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     abe:	89 2b       	or	r24, r25
     ac0:	69 f7       	brne	.-38     	; 0xa9c <__stack+0x19d>
     ac2:	14 c0       	rjmp	.+40     	; 0xaec <__stack+0x1ed>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ac4:	69 8d       	ldd	r22, Y+25	; 0x19
     ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     acc:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	9e 8f       	std	Y+30, r25	; 0x1e
     ad6:	8d 8f       	std	Y+29, r24	; 0x1d
     ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ada:	9e 8d       	ldd	r25, Y+30	; 0x1e
     adc:	9a a3       	std	Y+34, r25	; 0x22
     ade:	89 a3       	std	Y+33, r24	; 0x21
     ae0:	89 a1       	ldd	r24, Y+33	; 0x21
     ae2:	9a a1       	ldd	r25, Y+34	; 0x22
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <__stack+0x1e5>
     ae8:	9a a3       	std	Y+34, r25	; 0x22
     aea:	89 a3       	std	Y+33, r24	; 0x21
			}
			if (HIGH_BUTTON == PRESSED && (PIND&HIGH_LIMIT_BUTTON))
			{
				//MaxPoint = temp_capacitance ;
				int i  ;
				for (i = 0 ; i <6 ;i++)
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	9c 81       	ldd	r25, Y+4	; 0x04
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	06 97       	sbiw	r24, 0x06	; 6
     afc:	0c f4       	brge	.+2      	; 0xb00 <__stack+0x201>
     afe:	7a cf       	rjmp	.-268    	; 0x9f4 <__stack+0xf5>
			if (HIGH_BUTTON == UNPRESSED && (PIND&HIGH_LIMIT_BUTTON))
			{
				HIGH_BUTTON = PRESSED ;
			}
			if (HIGH_BUTTON == PRESSED && (PIND&HIGH_LIMIT_BUTTON))
			{
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <__stack+0x207>
					_delay_ms(100) ;
				}
			}
			else
			{
				HIGH_BUTTON =UNPRESSED ; 
     b02:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <HIGH_BUTTON>
				
			}
			if (HIGH_BUTTON == UNPRESSED && (PIND&HIGH_LIMIT_BUTTON) &&LOW_BUTTON == PRESSED && (PIND&LOW_LIMIT_BUTTON))
     b06:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HIGH_BUTTON>
     b0a:	88 23       	and	r24, r24
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__stack+0x211>
     b0e:	5b cd       	rjmp	.-1354   	; 0x5c6 <main+0xac>
     b10:	89 e2       	ldi	r24, 0x29	; 41
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	fc 01       	movw	r30, r24
     b16:	80 81       	ld	r24, Z
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	84 70       	andi	r24, 0x04	; 4
     b1e:	99 27       	eor	r25, r25
     b20:	89 2b       	or	r24, r25
     b22:	09 f4       	brne	.+2      	; 0xb26 <__stack+0x227>
     b24:	50 cd       	rjmp	.-1376   	; 0x5c6 <main+0xac>
     b26:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <LOW_BUTTON>
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__stack+0x231>
     b2e:	4b cd       	rjmp	.-1386   	; 0x5c6 <main+0xac>
     b30:	89 e2       	ldi	r24, 0x29	; 41
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	88 70       	andi	r24, 0x08	; 8
     b3e:	99 27       	eor	r25, r25
     b40:	89 2b       	or	r24, r25
     b42:	09 f4       	brne	.+2      	; 0xb46 <__stack+0x247>
     b44:	40 cd       	rjmp	.-1408   	; 0x5c6 <main+0xac>
			{
				Setpoint = 0 ; 
     b46:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     b4a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b4e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b52:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
				
				MaxPoint = 0 ; 
     b56:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <MaxPoint>
     b5a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <MaxPoint+0x1>
     b5e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <MaxPoint+0x2>
     b62:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <MaxPoint+0x3>
			}
			//while (millis() % 50 != 0);
		}      
     b66:	2f cd       	rjmp	.-1442   	; 0x5c6 <main+0xac>

00000b68 <__vector_1>:
}

ISR(INT0_vect)	// LOW limit
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	(*CallBackFuncINT0_ptr)(); 
     b94:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CallBackFuncINT0_ptr>
     b98:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <CallBackFuncINT0_ptr+0x1>
     b9c:	fc 01       	movw	r30, r24
     b9e:	09 95       	icall
}
     ba0:	00 00       	nop
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_2>:

ISR(INT1_vect) // High limit
{
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	(*CallBackFuncINT1_ptr)(); 
     bf6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <CallBackFuncINT1_ptr>
     bfa:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <CallBackFuncINT1_ptr+0x1>
     bfe:	fc 01       	movw	r30, r24
     c00:	09 95       	icall
     c02:	00 00       	nop
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
    cli();
     c34:	f8 94       	cli
    return 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <__iSeiParam>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	00 d0       	rcall	.+0      	; 0xc44 <__iSeiParam+0x6>
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
    sei();
     c4c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
     c4e:	00 00       	nop
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <__vector_11>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
  timer1_millis++;
     c76:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <timer1_millis>
     c7a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <timer1_millis+0x1>
     c7e:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <timer1_millis+0x2>
     c82:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <timer1_millis+0x3>
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	a1 1d       	adc	r26, r1
     c8a:	b1 1d       	adc	r27, r1
     c8c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <timer1_millis>
     c90:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <timer1_millis+0x1>
     c94:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <timer1_millis+0x2>
     c98:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <timer1_millis+0x3>
}
     c9c:	00 00       	nop
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	bf 91       	pop	r27
     ca4:	af 91       	pop	r26
     ca6:	9f 91       	pop	r25
     ca8:	8f 91       	pop	r24
     caa:	0f 90       	pop	r0
     cac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <init_millis>:

void init_millis(unsigned long f_cpu)
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	28 97       	sbiw	r28, 0x08	; 8
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	6d 83       	std	Y+5, r22	; 0x05
     ccc:	7e 83       	std	Y+6, r23	; 0x06
     cce:	8f 83       	std	Y+7, r24	; 0x07
     cd0:	98 87       	std	Y+8, r25	; 0x08
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	af 81       	ldd	r26, Y+7	; 0x07
     cd8:	b8 85       	ldd	r27, Y+8	; 0x08
     cda:	20 e4       	ldi	r18, 0x40	; 64
     cdc:	3f e1       	ldi	r19, 0x1F	; 31
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0e 94 15 09 	call	0x122a	; 0x122a <__udivmodsi4>
     cea:	da 01       	movw	r26, r20
     cec:	c9 01       	movw	r24, r18
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	ab 83       	std	Y+3, r26	; 0x03
     cf4:	bc 83       	std	Y+4, r27	; 0x04

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
     cf6:	81 e8       	ldi	r24, 0x81	; 129
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	21 e8       	ldi	r18, 0x81	; 129
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	f9 01       	movw	r30, r18
     d00:	20 81       	ld	r18, Z
     d02:	2a 60       	ori	r18, 0x0A	; 10
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
     d08:	29 e8       	ldi	r18, 0x89	; 137
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	ab 81       	ldd	r26, Y+3	; 0x03
     d12:	bc 81       	ldd	r27, Y+4	; 0x04
     d14:	89 2f       	mov	r24, r25
     d16:	9a 2f       	mov	r25, r26
     d18:	ab 2f       	mov	r26, r27
     d1a:	bb 27       	eor	r27, r27
     d1c:	f9 01       	movw	r30, r18
     d1e:	80 83       	st	Z, r24
  OCR1AL = ctc_match_overflow;
     d20:	88 e8       	ldi	r24, 0x88	; 136
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	29 81       	ldd	r18, Y+1	; 0x01
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
     d2a:	8f e6       	ldi	r24, 0x6F	; 111
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	2f e6       	ldi	r18, 0x6F	; 111
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	f9 01       	movw	r30, r18
     d34:	20 81       	ld	r18, Z
     d36:	22 60       	ori	r18, 0x02	; 2
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18

  //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
}
     d3c:	00 00       	nop
     d3e:	28 96       	adiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <millis>:

unsigned long millis (void)
{
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	00 d0       	rcall	.+0      	; 0xd56 <millis+0x6>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <millis+0x8>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <millis+0xa>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
     d5e:	1e 82       	std	Y+6, r1	; 0x06
     d60:	0e 94 16 06 	call	0xc2c	; 0xc2c <__iCliRetVal>
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	0d c0       	rjmp	.+26     	; 0xd82 <millis+0x32>
    millis_return = timer1_millis;
     d68:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <timer1_millis>
     d6c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <timer1_millis+0x1>
     d70:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <timer1_millis+0x2>
     d74:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <timer1_millis+0x3>
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	ab 83       	std	Y+3, r26	; 0x03
     d7e:	bc 83       	std	Y+4, r27	; 0x04
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
     d80:	1d 82       	std	Y+5, r1	; 0x05
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	88 23       	and	r24, r24
     d86:	81 f7       	brne	.-32     	; 0xd68 <millis+0x18>
     d88:	ce 01       	movw	r24, r28
     d8a:	06 96       	adiw	r24, 0x06	; 6
     d8c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__iSeiParam>
    millis_return = timer1_millis;
  }
  return millis_return;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	ab 81       	ldd	r26, Y+3	; 0x03
     d96:	bc 81       	ldd	r27, Y+4	; 0x04
}
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	26 96       	adiw	r28, 0x06	; 6
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <__subsf3>:
     dae:	50 58       	subi	r21, 0x80	; 128

00000db0 <__addsf3>:
     db0:	bb 27       	eor	r27, r27
     db2:	aa 27       	eor	r26, r26
     db4:	0e 94 ef 06 	call	0xdde	; 0xdde <__addsf3x>
     db8:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__fp_round>
     dbc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fp_pscA>
     dc0:	38 f0       	brcs	.+14     	; 0xdd0 <__addsf3+0x20>
     dc2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscB>
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__addsf3+0x20>
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <__addsf3+0x28>
     dca:	9f 3f       	cpi	r25, 0xFF	; 255
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <__addsf3+0x24>
     dce:	26 f4       	brtc	.+8      	; 0xdd8 <__addsf3+0x28>
     dd0:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_nan>
     dd4:	0e f4       	brtc	.+2      	; 0xdd8 <__addsf3+0x28>
     dd6:	e0 95       	com	r30
     dd8:	e7 fb       	bst	r30, 7
     dda:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>

00000dde <__addsf3x>:
     dde:	e9 2f       	mov	r30, r25
     de0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_split3>
     de4:	58 f3       	brcs	.-42     	; 0xdbc <__addsf3+0xc>
     de6:	ba 17       	cp	r27, r26
     de8:	62 07       	cpc	r22, r18
     dea:	73 07       	cpc	r23, r19
     dec:	84 07       	cpc	r24, r20
     dee:	95 07       	cpc	r25, r21
     df0:	20 f0       	brcs	.+8      	; 0xdfa <__addsf3x+0x1c>
     df2:	79 f4       	brne	.+30     	; 0xe12 <__addsf3x+0x34>
     df4:	a6 f5       	brtc	.+104    	; 0xe5e <__addsf3x+0x80>
     df6:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_zero>
     dfa:	0e f4       	brtc	.+2      	; 0xdfe <__addsf3x+0x20>
     dfc:	e0 95       	com	r30
     dfe:	0b 2e       	mov	r0, r27
     e00:	ba 2f       	mov	r27, r26
     e02:	a0 2d       	mov	r26, r0
     e04:	0b 01       	movw	r0, r22
     e06:	b9 01       	movw	r22, r18
     e08:	90 01       	movw	r18, r0
     e0a:	0c 01       	movw	r0, r24
     e0c:	ca 01       	movw	r24, r20
     e0e:	a0 01       	movw	r20, r0
     e10:	11 24       	eor	r1, r1
     e12:	ff 27       	eor	r31, r31
     e14:	59 1b       	sub	r21, r25
     e16:	99 f0       	breq	.+38     	; 0xe3e <__addsf3x+0x60>
     e18:	59 3f       	cpi	r21, 0xF9	; 249
     e1a:	50 f4       	brcc	.+20     	; 0xe30 <__addsf3x+0x52>
     e1c:	50 3e       	cpi	r21, 0xE0	; 224
     e1e:	68 f1       	brcs	.+90     	; 0xe7a <__addsf3x+0x9c>
     e20:	1a 16       	cp	r1, r26
     e22:	f0 40       	sbci	r31, 0x00	; 0
     e24:	a2 2f       	mov	r26, r18
     e26:	23 2f       	mov	r18, r19
     e28:	34 2f       	mov	r19, r20
     e2a:	44 27       	eor	r20, r20
     e2c:	58 5f       	subi	r21, 0xF8	; 248
     e2e:	f3 cf       	rjmp	.-26     	; 0xe16 <__addsf3x+0x38>
     e30:	46 95       	lsr	r20
     e32:	37 95       	ror	r19
     e34:	27 95       	ror	r18
     e36:	a7 95       	ror	r26
     e38:	f0 40       	sbci	r31, 0x00	; 0
     e3a:	53 95       	inc	r21
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <__addsf3x+0x52>
     e3e:	7e f4       	brtc	.+30     	; 0xe5e <__addsf3x+0x80>
     e40:	1f 16       	cp	r1, r31
     e42:	ba 0b       	sbc	r27, r26
     e44:	62 0b       	sbc	r22, r18
     e46:	73 0b       	sbc	r23, r19
     e48:	84 0b       	sbc	r24, r20
     e4a:	ba f0       	brmi	.+46     	; 0xe7a <__addsf3x+0x9c>
     e4c:	91 50       	subi	r25, 0x01	; 1
     e4e:	a1 f0       	breq	.+40     	; 0xe78 <__addsf3x+0x9a>
     e50:	ff 0f       	add	r31, r31
     e52:	bb 1f       	adc	r27, r27
     e54:	66 1f       	adc	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	c2 f7       	brpl	.-16     	; 0xe4c <__addsf3x+0x6e>
     e5c:	0e c0       	rjmp	.+28     	; 0xe7a <__addsf3x+0x9c>
     e5e:	ba 0f       	add	r27, r26
     e60:	62 1f       	adc	r22, r18
     e62:	73 1f       	adc	r23, r19
     e64:	84 1f       	adc	r24, r20
     e66:	48 f4       	brcc	.+18     	; 0xe7a <__addsf3x+0x9c>
     e68:	87 95       	ror	r24
     e6a:	77 95       	ror	r23
     e6c:	67 95       	ror	r22
     e6e:	b7 95       	ror	r27
     e70:	f7 95       	ror	r31
     e72:	9e 3f       	cpi	r25, 0xFE	; 254
     e74:	08 f0       	brcs	.+2      	; 0xe78 <__addsf3x+0x9a>
     e76:	b0 cf       	rjmp	.-160    	; 0xdd8 <__addsf3+0x28>
     e78:	93 95       	inc	r25
     e7a:	88 0f       	add	r24, r24
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <__addsf3x+0xa2>
     e7e:	99 27       	eor	r25, r25
     e80:	ee 0f       	add	r30, r30
     e82:	97 95       	ror	r25
     e84:	87 95       	ror	r24
     e86:	08 95       	ret

00000e88 <__cmpsf2>:
     e88:	0e 94 2e 08 	call	0x105c	; 0x105c <__fp_cmp>
     e8c:	08 f4       	brcc	.+2      	; 0xe90 <__cmpsf2+0x8>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	08 95       	ret

00000e92 <__divsf3>:
     e92:	0e 94 5d 07 	call	0xeba	; 0xeba <__divsf3x>
     e96:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__fp_round>
     e9a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscB>
     e9e:	58 f0       	brcs	.+22     	; 0xeb6 <__divsf3+0x24>
     ea0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fp_pscA>
     ea4:	40 f0       	brcs	.+16     	; 0xeb6 <__divsf3+0x24>
     ea6:	29 f4       	brne	.+10     	; 0xeb2 <__divsf3+0x20>
     ea8:	5f 3f       	cpi	r21, 0xFF	; 255
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <__divsf3+0x24>
     eac:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>
     eb0:	51 11       	cpse	r21, r1
     eb2:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_szero>
     eb6:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_nan>

00000eba <__divsf3x>:
     eba:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_split3>
     ebe:	68 f3       	brcs	.-38     	; 0xe9a <__divsf3+0x8>

00000ec0 <__divsf3_pse>:
     ec0:	99 23       	and	r25, r25
     ec2:	b1 f3       	breq	.-20     	; 0xeb0 <__divsf3+0x1e>
     ec4:	55 23       	and	r21, r21
     ec6:	91 f3       	breq	.-28     	; 0xeac <__divsf3+0x1a>
     ec8:	95 1b       	sub	r25, r21
     eca:	55 0b       	sbc	r21, r21
     ecc:	bb 27       	eor	r27, r27
     ece:	aa 27       	eor	r26, r26
     ed0:	62 17       	cp	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	38 f0       	brcs	.+14     	; 0xee6 <__divsf3_pse+0x26>
     ed8:	9f 5f       	subi	r25, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	44 1f       	adc	r20, r20
     ee2:	aa 1f       	adc	r26, r26
     ee4:	a9 f3       	breq	.-22     	; 0xed0 <__divsf3_pse+0x10>
     ee6:	35 d0       	rcall	.+106    	; 0xf52 <__divsf3_pse+0x92>
     ee8:	0e 2e       	mov	r0, r30
     eea:	3a f0       	brmi	.+14     	; 0xefa <__divsf3_pse+0x3a>
     eec:	e0 e8       	ldi	r30, 0x80	; 128
     eee:	32 d0       	rcall	.+100    	; 0xf54 <__divsf3_pse+0x94>
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	50 40       	sbci	r21, 0x00	; 0
     ef4:	e6 95       	lsr	r30
     ef6:	00 1c       	adc	r0, r0
     ef8:	ca f7       	brpl	.-14     	; 0xeec <__divsf3_pse+0x2c>
     efa:	2b d0       	rcall	.+86     	; 0xf52 <__divsf3_pse+0x92>
     efc:	fe 2f       	mov	r31, r30
     efe:	29 d0       	rcall	.+82     	; 0xf52 <__divsf3_pse+0x92>
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	bb 1f       	adc	r27, r27
     f08:	26 17       	cp	r18, r22
     f0a:	37 07       	cpc	r19, r23
     f0c:	48 07       	cpc	r20, r24
     f0e:	ab 07       	cpc	r26, r27
     f10:	b0 e8       	ldi	r27, 0x80	; 128
     f12:	09 f0       	breq	.+2      	; 0xf16 <__divsf3_pse+0x56>
     f14:	bb 0b       	sbc	r27, r27
     f16:	80 2d       	mov	r24, r0
     f18:	bf 01       	movw	r22, r30
     f1a:	ff 27       	eor	r31, r31
     f1c:	93 58       	subi	r25, 0x83	; 131
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	3a f0       	brmi	.+14     	; 0xf30 <__divsf3_pse+0x70>
     f22:	9e 3f       	cpi	r25, 0xFE	; 254
     f24:	51 05       	cpc	r21, r1
     f26:	78 f0       	brcs	.+30     	; 0xf46 <__divsf3_pse+0x86>
     f28:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>
     f2c:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_szero>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	e4 f3       	brlt	.-8      	; 0xf2c <__divsf3_pse+0x6c>
     f34:	98 3e       	cpi	r25, 0xE8	; 232
     f36:	d4 f3       	brlt	.-12     	; 0xf2c <__divsf3_pse+0x6c>
     f38:	86 95       	lsr	r24
     f3a:	77 95       	ror	r23
     f3c:	67 95       	ror	r22
     f3e:	b7 95       	ror	r27
     f40:	f7 95       	ror	r31
     f42:	9f 5f       	subi	r25, 0xFF	; 255
     f44:	c9 f7       	brne	.-14     	; 0xf38 <__divsf3_pse+0x78>
     f46:	88 0f       	add	r24, r24
     f48:	91 1d       	adc	r25, r1
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	97 f9       	bld	r25, 7
     f50:	08 95       	ret
     f52:	e1 e0       	ldi	r30, 0x01	; 1
     f54:	66 0f       	add	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	bb 1f       	adc	r27, r27
     f5c:	62 17       	cp	r22, r18
     f5e:	73 07       	cpc	r23, r19
     f60:	84 07       	cpc	r24, r20
     f62:	ba 07       	cpc	r27, r26
     f64:	20 f0       	brcs	.+8      	; 0xf6e <__divsf3_pse+0xae>
     f66:	62 1b       	sub	r22, r18
     f68:	73 0b       	sbc	r23, r19
     f6a:	84 0b       	sbc	r24, r20
     f6c:	ba 0b       	sbc	r27, r26
     f6e:	ee 1f       	adc	r30, r30
     f70:	88 f7       	brcc	.-30     	; 0xf54 <__divsf3_pse+0x94>
     f72:	e0 95       	com	r30
     f74:	08 95       	ret

00000f76 <__fixsfsi>:
     f76:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fixunssfsi>
     f7a:	68 94       	set
     f7c:	b1 11       	cpse	r27, r1
     f7e:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_szero>
     f82:	08 95       	ret

00000f84 <__fixunssfsi>:
     f84:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_splitA>
     f88:	88 f0       	brcs	.+34     	; 0xfac <__fixunssfsi+0x28>
     f8a:	9f 57       	subi	r25, 0x7F	; 127
     f8c:	98 f0       	brcs	.+38     	; 0xfb4 <__fixunssfsi+0x30>
     f8e:	b9 2f       	mov	r27, r25
     f90:	99 27       	eor	r25, r25
     f92:	b7 51       	subi	r27, 0x17	; 23
     f94:	b0 f0       	brcs	.+44     	; 0xfc2 <__fixunssfsi+0x3e>
     f96:	e1 f0       	breq	.+56     	; 0xfd0 <__fixunssfsi+0x4c>
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	1a f0       	brmi	.+6      	; 0xfa8 <__fixunssfsi+0x24>
     fa2:	ba 95       	dec	r27
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <__fixunssfsi+0x14>
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <__fixunssfsi+0x4c>
     fa8:	b1 30       	cpi	r27, 0x01	; 1
     faa:	91 f0       	breq	.+36     	; 0xfd0 <__fixunssfsi+0x4c>
     fac:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_zero>
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	08 95       	ret
     fb4:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_zero>
     fb8:	67 2f       	mov	r22, r23
     fba:	78 2f       	mov	r23, r24
     fbc:	88 27       	eor	r24, r24
     fbe:	b8 5f       	subi	r27, 0xF8	; 248
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <__fixunssfsi+0x4c>
     fc2:	b9 3f       	cpi	r27, 0xF9	; 249
     fc4:	cc f3       	brlt	.-14     	; 0xfb8 <__fixunssfsi+0x34>
     fc6:	86 95       	lsr	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b3 95       	inc	r27
     fce:	d9 f7       	brne	.-10     	; 0xfc6 <__fixunssfsi+0x42>
     fd0:	3e f4       	brtc	.+14     	; 0xfe0 <__fixunssfsi+0x5c>
     fd2:	90 95       	com	r25
     fd4:	80 95       	com	r24
     fd6:	70 95       	com	r23
     fd8:	61 95       	neg	r22
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	8f 4f       	sbci	r24, 0xFF	; 255
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	08 95       	ret

00000fe2 <__floatunsisf>:
     fe2:	e8 94       	clt
     fe4:	09 c0       	rjmp	.+18     	; 0xff8 <__floatsisf+0x12>

00000fe6 <__floatsisf>:
     fe6:	97 fb       	bst	r25, 7
     fe8:	3e f4       	brtc	.+14     	; 0xff8 <__floatsisf+0x12>
     fea:	90 95       	com	r25
     fec:	80 95       	com	r24
     fee:	70 95       	com	r23
     ff0:	61 95       	neg	r22
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	99 23       	and	r25, r25
     ffa:	a9 f0       	breq	.+42     	; 0x1026 <__floatsisf+0x40>
     ffc:	f9 2f       	mov	r31, r25
     ffe:	96 e9       	ldi	r25, 0x96	; 150
    1000:	bb 27       	eor	r27, r27
    1002:	93 95       	inc	r25
    1004:	f6 95       	lsr	r31
    1006:	87 95       	ror	r24
    1008:	77 95       	ror	r23
    100a:	67 95       	ror	r22
    100c:	b7 95       	ror	r27
    100e:	f1 11       	cpse	r31, r1
    1010:	f8 cf       	rjmp	.-16     	; 0x1002 <__floatsisf+0x1c>
    1012:	fa f4       	brpl	.+62     	; 0x1052 <__floatsisf+0x6c>
    1014:	bb 0f       	add	r27, r27
    1016:	11 f4       	brne	.+4      	; 0x101c <__floatsisf+0x36>
    1018:	60 ff       	sbrs	r22, 0
    101a:	1b c0       	rjmp	.+54     	; 0x1052 <__floatsisf+0x6c>
    101c:	6f 5f       	subi	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	8f 4f       	sbci	r24, 0xFF	; 255
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	16 c0       	rjmp	.+44     	; 0x1052 <__floatsisf+0x6c>
    1026:	88 23       	and	r24, r24
    1028:	11 f0       	breq	.+4      	; 0x102e <__floatsisf+0x48>
    102a:	96 e9       	ldi	r25, 0x96	; 150
    102c:	11 c0       	rjmp	.+34     	; 0x1050 <__floatsisf+0x6a>
    102e:	77 23       	and	r23, r23
    1030:	21 f0       	breq	.+8      	; 0x103a <__floatsisf+0x54>
    1032:	9e e8       	ldi	r25, 0x8E	; 142
    1034:	87 2f       	mov	r24, r23
    1036:	76 2f       	mov	r23, r22
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <__floatsisf+0x5e>
    103a:	66 23       	and	r22, r22
    103c:	71 f0       	breq	.+28     	; 0x105a <__floatsisf+0x74>
    103e:	96 e8       	ldi	r25, 0x86	; 134
    1040:	86 2f       	mov	r24, r22
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	2a f0       	brmi	.+10     	; 0x1052 <__floatsisf+0x6c>
    1048:	9a 95       	dec	r25
    104a:	66 0f       	add	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	da f7       	brpl	.-10     	; 0x1048 <__floatsisf+0x62>
    1052:	88 0f       	add	r24, r24
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	97 f9       	bld	r25, 7
    105a:	08 95       	ret

0000105c <__fp_cmp>:
    105c:	99 0f       	add	r25, r25
    105e:	00 08       	sbc	r0, r0
    1060:	55 0f       	add	r21, r21
    1062:	aa 0b       	sbc	r26, r26
    1064:	e0 e8       	ldi	r30, 0x80	; 128
    1066:	fe ef       	ldi	r31, 0xFE	; 254
    1068:	16 16       	cp	r1, r22
    106a:	17 06       	cpc	r1, r23
    106c:	e8 07       	cpc	r30, r24
    106e:	f9 07       	cpc	r31, r25
    1070:	c0 f0       	brcs	.+48     	; 0x10a2 <__fp_cmp+0x46>
    1072:	12 16       	cp	r1, r18
    1074:	13 06       	cpc	r1, r19
    1076:	e4 07       	cpc	r30, r20
    1078:	f5 07       	cpc	r31, r21
    107a:	98 f0       	brcs	.+38     	; 0x10a2 <__fp_cmp+0x46>
    107c:	62 1b       	sub	r22, r18
    107e:	73 0b       	sbc	r23, r19
    1080:	84 0b       	sbc	r24, r20
    1082:	95 0b       	sbc	r25, r21
    1084:	39 f4       	brne	.+14     	; 0x1094 <__fp_cmp+0x38>
    1086:	0a 26       	eor	r0, r26
    1088:	61 f0       	breq	.+24     	; 0x10a2 <__fp_cmp+0x46>
    108a:	23 2b       	or	r18, r19
    108c:	24 2b       	or	r18, r20
    108e:	25 2b       	or	r18, r21
    1090:	21 f4       	brne	.+8      	; 0x109a <__fp_cmp+0x3e>
    1092:	08 95       	ret
    1094:	0a 26       	eor	r0, r26
    1096:	09 f4       	brne	.+2      	; 0x109a <__fp_cmp+0x3e>
    1098:	a1 40       	sbci	r26, 0x01	; 1
    109a:	a6 95       	lsr	r26
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	81 1d       	adc	r24, r1
    10a0:	81 1d       	adc	r24, r1
    10a2:	08 95       	ret

000010a4 <__fp_inf>:
    10a4:	97 f9       	bld	r25, 7
    10a6:	9f 67       	ori	r25, 0x7F	; 127
    10a8:	80 e8       	ldi	r24, 0x80	; 128
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	08 95       	ret

000010b0 <__fp_nan>:
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	80 ec       	ldi	r24, 0xC0	; 192
    10b4:	08 95       	ret

000010b6 <__fp_pscA>:
    10b6:	00 24       	eor	r0, r0
    10b8:	0a 94       	dec	r0
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	09 06       	cpc	r0, r25
    10c2:	08 95       	ret

000010c4 <__fp_pscB>:
    10c4:	00 24       	eor	r0, r0
    10c6:	0a 94       	dec	r0
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	14 06       	cpc	r1, r20
    10ce:	05 06       	cpc	r0, r21
    10d0:	08 95       	ret

000010d2 <__fp_round>:
    10d2:	09 2e       	mov	r0, r25
    10d4:	03 94       	inc	r0
    10d6:	00 0c       	add	r0, r0
    10d8:	11 f4       	brne	.+4      	; 0x10de <__fp_round+0xc>
    10da:	88 23       	and	r24, r24
    10dc:	52 f0       	brmi	.+20     	; 0x10f2 <__fp_round+0x20>
    10de:	bb 0f       	add	r27, r27
    10e0:	40 f4       	brcc	.+16     	; 0x10f2 <__fp_round+0x20>
    10e2:	bf 2b       	or	r27, r31
    10e4:	11 f4       	brne	.+4      	; 0x10ea <__fp_round+0x18>
    10e6:	60 ff       	sbrs	r22, 0
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <__fp_round+0x20>
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8f 4f       	sbci	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <__fp_split3>:
    10f4:	57 fd       	sbrc	r21, 7
    10f6:	90 58       	subi	r25, 0x80	; 128
    10f8:	44 0f       	add	r20, r20
    10fa:	55 1f       	adc	r21, r21
    10fc:	59 f0       	breq	.+22     	; 0x1114 <__fp_splitA+0x10>
    10fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1100:	71 f0       	breq	.+28     	; 0x111e <__fp_splitA+0x1a>
    1102:	47 95       	ror	r20

00001104 <__fp_splitA>:
    1104:	88 0f       	add	r24, r24
    1106:	97 fb       	bst	r25, 7
    1108:	99 1f       	adc	r25, r25
    110a:	61 f0       	breq	.+24     	; 0x1124 <__fp_splitA+0x20>
    110c:	9f 3f       	cpi	r25, 0xFF	; 255
    110e:	79 f0       	breq	.+30     	; 0x112e <__fp_splitA+0x2a>
    1110:	87 95       	ror	r24
    1112:	08 95       	ret
    1114:	12 16       	cp	r1, r18
    1116:	13 06       	cpc	r1, r19
    1118:	14 06       	cpc	r1, r20
    111a:	55 1f       	adc	r21, r21
    111c:	f2 cf       	rjmp	.-28     	; 0x1102 <__fp_split3+0xe>
    111e:	46 95       	lsr	r20
    1120:	f1 df       	rcall	.-30     	; 0x1104 <__fp_splitA>
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <__fp_splitA+0x30>
    1124:	16 16       	cp	r1, r22
    1126:	17 06       	cpc	r1, r23
    1128:	18 06       	cpc	r1, r24
    112a:	99 1f       	adc	r25, r25
    112c:	f1 cf       	rjmp	.-30     	; 0x1110 <__fp_splitA+0xc>
    112e:	86 95       	lsr	r24
    1130:	71 05       	cpc	r23, r1
    1132:	61 05       	cpc	r22, r1
    1134:	08 94       	sec
    1136:	08 95       	ret

00001138 <__fp_zero>:
    1138:	e8 94       	clt

0000113a <__fp_szero>:
    113a:	bb 27       	eor	r27, r27
    113c:	66 27       	eor	r22, r22
    113e:	77 27       	eor	r23, r23
    1140:	cb 01       	movw	r24, r22
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__gesf2>:
    1146:	0e 94 2e 08 	call	0x105c	; 0x105c <__fp_cmp>
    114a:	08 f4       	brcc	.+2      	; 0x114e <__gesf2+0x8>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	08 95       	ret

00001150 <__mulsf3>:
    1150:	0e 94 bb 08 	call	0x1176	; 0x1176 <__mulsf3x>
    1154:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__fp_round>
    1158:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fp_pscA>
    115c:	38 f0       	brcs	.+14     	; 0x116c <__mulsf3+0x1c>
    115e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscB>
    1162:	20 f0       	brcs	.+8      	; 0x116c <__mulsf3+0x1c>
    1164:	95 23       	and	r25, r21
    1166:	11 f0       	breq	.+4      	; 0x116c <__mulsf3+0x1c>
    1168:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>
    116c:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_nan>
    1170:	11 24       	eor	r1, r1
    1172:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_szero>

00001176 <__mulsf3x>:
    1176:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_split3>
    117a:	70 f3       	brcs	.-36     	; 0x1158 <__mulsf3+0x8>

0000117c <__mulsf3_pse>:
    117c:	95 9f       	mul	r25, r21
    117e:	c1 f3       	breq	.-16     	; 0x1170 <__mulsf3+0x20>
    1180:	95 0f       	add	r25, r21
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	55 1f       	adc	r21, r21
    1186:	62 9f       	mul	r22, r18
    1188:	f0 01       	movw	r30, r0
    118a:	72 9f       	mul	r23, r18
    118c:	bb 27       	eor	r27, r27
    118e:	f0 0d       	add	r31, r0
    1190:	b1 1d       	adc	r27, r1
    1192:	63 9f       	mul	r22, r19
    1194:	aa 27       	eor	r26, r26
    1196:	f0 0d       	add	r31, r0
    1198:	b1 1d       	adc	r27, r1
    119a:	aa 1f       	adc	r26, r26
    119c:	64 9f       	mul	r22, r20
    119e:	66 27       	eor	r22, r22
    11a0:	b0 0d       	add	r27, r0
    11a2:	a1 1d       	adc	r26, r1
    11a4:	66 1f       	adc	r22, r22
    11a6:	82 9f       	mul	r24, r18
    11a8:	22 27       	eor	r18, r18
    11aa:	b0 0d       	add	r27, r0
    11ac:	a1 1d       	adc	r26, r1
    11ae:	62 1f       	adc	r22, r18
    11b0:	73 9f       	mul	r23, r19
    11b2:	b0 0d       	add	r27, r0
    11b4:	a1 1d       	adc	r26, r1
    11b6:	62 1f       	adc	r22, r18
    11b8:	83 9f       	mul	r24, r19
    11ba:	a0 0d       	add	r26, r0
    11bc:	61 1d       	adc	r22, r1
    11be:	22 1f       	adc	r18, r18
    11c0:	74 9f       	mul	r23, r20
    11c2:	33 27       	eor	r19, r19
    11c4:	a0 0d       	add	r26, r0
    11c6:	61 1d       	adc	r22, r1
    11c8:	23 1f       	adc	r18, r19
    11ca:	84 9f       	mul	r24, r20
    11cc:	60 0d       	add	r22, r0
    11ce:	21 1d       	adc	r18, r1
    11d0:	82 2f       	mov	r24, r18
    11d2:	76 2f       	mov	r23, r22
    11d4:	6a 2f       	mov	r22, r26
    11d6:	11 24       	eor	r1, r1
    11d8:	9f 57       	subi	r25, 0x7F	; 127
    11da:	50 40       	sbci	r21, 0x00	; 0
    11dc:	9a f0       	brmi	.+38     	; 0x1204 <__mulsf3_pse+0x88>
    11de:	f1 f0       	breq	.+60     	; 0x121c <__mulsf3_pse+0xa0>
    11e0:	88 23       	and	r24, r24
    11e2:	4a f0       	brmi	.+18     	; 0x11f6 <__mulsf3_pse+0x7a>
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	bb 1f       	adc	r27, r27
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	50 40       	sbci	r21, 0x00	; 0
    11f4:	a9 f7       	brne	.-22     	; 0x11e0 <__mulsf3_pse+0x64>
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	51 05       	cpc	r21, r1
    11fa:	80 f0       	brcs	.+32     	; 0x121c <__mulsf3_pse+0xa0>
    11fc:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>
    1200:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_szero>
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	e4 f3       	brlt	.-8      	; 0x1200 <__mulsf3_pse+0x84>
    1208:	98 3e       	cpi	r25, 0xE8	; 232
    120a:	d4 f3       	brlt	.-12     	; 0x1200 <__mulsf3_pse+0x84>
    120c:	86 95       	lsr	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	b7 95       	ror	r27
    1214:	f7 95       	ror	r31
    1216:	e7 95       	ror	r30
    1218:	9f 5f       	subi	r25, 0xFF	; 255
    121a:	c1 f7       	brne	.-16     	; 0x120c <__mulsf3_pse+0x90>
    121c:	fe 2b       	or	r31, r30
    121e:	88 0f       	add	r24, r24
    1220:	91 1d       	adc	r25, r1
    1222:	96 95       	lsr	r25
    1224:	87 95       	ror	r24
    1226:	97 f9       	bld	r25, 7
    1228:	08 95       	ret

0000122a <__udivmodsi4>:
    122a:	a1 e2       	ldi	r26, 0x21	; 33
    122c:	1a 2e       	mov	r1, r26
    122e:	aa 1b       	sub	r26, r26
    1230:	bb 1b       	sub	r27, r27
    1232:	fd 01       	movw	r30, r26
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <__udivmodsi4_ep>

00001236 <__udivmodsi4_loop>:
    1236:	aa 1f       	adc	r26, r26
    1238:	bb 1f       	adc	r27, r27
    123a:	ee 1f       	adc	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	a2 17       	cp	r26, r18
    1240:	b3 07       	cpc	r27, r19
    1242:	e4 07       	cpc	r30, r20
    1244:	f5 07       	cpc	r31, r21
    1246:	20 f0       	brcs	.+8      	; 0x1250 <__udivmodsi4_ep>
    1248:	a2 1b       	sub	r26, r18
    124a:	b3 0b       	sbc	r27, r19
    124c:	e4 0b       	sbc	r30, r20
    124e:	f5 0b       	sbc	r31, r21

00001250 <__udivmodsi4_ep>:
    1250:	66 1f       	adc	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	1a 94       	dec	r1
    125a:	69 f7       	brne	.-38     	; 0x1236 <__udivmodsi4_loop>
    125c:	60 95       	com	r22
    125e:	70 95       	com	r23
    1260:	80 95       	com	r24
    1262:	90 95       	com	r25
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	bd 01       	movw	r22, r26
    126a:	cf 01       	movw	r24, r30
    126c:	08 95       	ret

0000126e <_exit>:
    126e:	f8 94       	cli

00001270 <__stop_program>:
    1270:	ff cf       	rjmp	.-2      	; 0x1270 <__stop_program>
